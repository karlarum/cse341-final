// Import connectDb to initialize the database
const { connectDb, getDb } = require("../database/connect");

// Import Supertest HTTP library
const request = require("supertest");
// Import the express library
const express = require("express");

/* Import MongoClient class from mongodb library. Allows access to mongodb database. */
const { MongoClient, ObjectId } = require("mongodb");
// Import routes index where subroutes are defined
const routes = require("../routes/index");

// Create instance of express
const app = express();
// Parse JSON through req.body
app.use(express.json());
// Use routes module for requests to root "/"
app.use("/", routes);

// describe("Tests for connectDb function", () => {
//   afterEach(() => {
//     // Reset mocks and restore the original implementation
//     jest.resetModules();
//   });

//   test("Should throw error when client not initialized", async () => {
//     const { connectDb } = require("../database/connect");
  
//     // Call connectDb with undefined client
//     await expect(connectDb(undefined)).rejects.toThrowError("MongoClient instance is required");
//   });  
// });

// describe("Tests for connectDb function", () => {
//   let spyConsoleErr;

//   beforeEach(() => {
//     // Mock console.error to track its calls
//     spyConsoleErr = jest.spyOn(console, "error").mockImplementation();
//   });

//   afterEach(() => {
//     // Restore the mock after each test
//     jest.clearAllMocks();
//     spyConsoleErr.mockRestore();
//     jest.unmock("mongodb"); // Ensure no lingering mocks
//   });

//   test("Should handle MongoClient creation failure", async () => {
//     // Mock case: MongoClient creation fails
//     jest.mock("mongodb", () => {
//       const originalModule = jest.requireActual("mongodb");
//       return {
//         ...originalModule,
//         MongoClient: jest.fn(() => {
//           throw new Error("MongoClient creation failed");
//         }),
//       };
//     });

//     const { connectDb } = require("../database/connect");

//     await connectDb("team");

//     // Verify console.error was called
//     expect(spyConsoleErr).toHaveBeenCalledWith(
//       "Failed to connect to MongoDB",
//       expect.any(Error)
//     );
//   });
// });

// describe("Tests for getDb function", () => {
//   afterEach(() => {
//     // Reset mocks and restore the original implementation
//     jest.resetModules();
//   });

//   test("Should throw an error when db is not initialized", () => {
//     // Replace db variable with mocked version
//     jest.mock("../database/connect", () => {
//       // Import real mod in connect.js, but replace db
//       const ogModule = jest.requireActual("../database/connect");
//       // ret connect.js exports, replaces db export w/mock db
//       return {
//         ...ogModule,
//       // Replace w/undefined to test when db not initialized
//         db: undefined, // Simulate uninitialized db
//       };
//     });

//     // Re-import mocked connect.js module to use undefined db
//     const { getDb } = require("../database/connect");
//     // Call getDb, which throws error because db is undefined
//     expect(() => getDb()).toThrowError(
//       "Database not initialized. Call connectDb first."
//     );
//   });
// });

describe("Test controllers for 500 response", () => {
  beforeEach(() => {
    // Mock causes mongodb.getDb to throw an error
    jest.mock("../database/connect", () => ({
      getDb: jest.fn(() => {
        throw new Error("Failed to connect to MongoDB.");
      }),
    }));
  });
  
  afterEach(() => {
    // Restore mocks
    jest.clearAllMocks();
    // Remove mock so other tests are not affected
    jest.unmock("../database/connect");
    // Reset mocks
    jest.resetModules();
  });

  test("Should return 500 if getItem fails", async () => {
    const { getItem } = require("../controllers/itemController");

    // Mock Express req and res objects
    const req = {};
    const res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };

    // Call the function with the mocked req/res values
    await getItem(req, res);

    // Test that res.status is called with 500
    expect(res.status).toHaveBeenCalledWith(500);
    // Test that res.json is called with correct message
    expect(res.json).toHaveBeenCalledWith({
      "error": "An error occurred: Failed to connect to MongoDB."
    });
  });

  test("Should return 500 if getItemById fails", async () => {
    const { getItemById } = require("../controllers/itemController");

    // Mock Express req and res objects
    const req = {
      params: {
        // Mock valid ObjectId
        id: "64b2fc2a4f0c9c1d2f8c8a4b", 
      },
    };
    const res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };

    // Call the function with the mocked req/res values
    await getItemById(req, res);

    // Test that res.status is called with 500
    expect(res.status).toHaveBeenCalledWith(500);
    // Test that res.json is called with correct message
    expect(res.json).toHaveBeenCalledWith({
      "error": "An error occurred: Failed to connect to MongoDB."
    });
  });

  test("Should return 500 if createItem fails", async () => {
    const { createItem } = require("../controllers/itemController");

    // Mock Express req and res objects
    const req = { 
      body: {
        name: "test name", 
        userId: null, 
        categoryId: null, 
        coverageId: null, 
        purchaseDate: new Date(), 
        purchasePrice: 0, 
        description: "This is a jest unit test."
      }
    };
    const res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };

    // Call the function with the mocked req/res values
    await createItem(req, res);

    // Test that res.status is called with 500
    expect(res.status).toHaveBeenCalledWith(500);
    // Test that res.json is called with correct message
    expect(res.json).toHaveBeenCalledWith({ 
      "error": "An error occurred: Failed to connect to MongoDB."
    });
  });

  test("Should return 500 if updateItem fails", async () => {
    const { updateItem } = require("../controllers/itemController");

    // Mock Express req and res objects
    const req = { params: { 
      id: "6759d95c78b34f58d00456ba" 
      }, 
      body: {
        name: "test name", 
        userId: null, 
        categoryId: null, 
        coverageId: null, 
        purchaseDate: new Date(), 
        purchasePrice: 0, 
        description: "This is a jest unit test."
      }
    };
    const res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };

    // Call the function with the mocked req/res values
    await updateItem(req, res);

    // Test that res.status is called with 500
    expect(res.status).toHaveBeenCalledWith(500);
    // Test that res.json is called with correct message
    expect(res.json).toHaveBeenCalledWith({ 
      "error": "An error occurred: Failed to connect to MongoDB."
    });
  });

  test("Should return 500 if deleteItem fails", async () => {
    const { deleteItem } = require("../controllers/itemController");

    // Mock Express req and res objects
    const req = { params: { id: "6759d95c78b34f58d00456ba" } };
    const res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };

    // Call the function with the mocked req/res values
    await deleteItem(req, res);

    // Test that res.status is called with 500
    expect(res.status).toHaveBeenCalledWith(500);
    // Test that res.json is called with correct message
    expect(res.json).toHaveBeenCalledWith({ 
      "error": "An error occurred: Failed to connect to MongoDB."
    });
  });
});

// describe("Tests updateItem controller for valid record not in database", () => {
//   let connection;
//   let db;

//   beforeAll(async () => {
//     connection = await MongoClient.connect(global.__MONGO_URI__);
//     // Connect to team database explicitly
//     db = await connection.db("team");

//     jest.mock('../database/connect', () => ({
//       getDb: jest.fn().mockReturnValue({
//         collection: jest.fn().mockReturnValue({
//           replaceOne: jest.fn().mockResolvedValue({ modifiedCount: 0 })
//         })
//       })
//     }));
//   });

//   /* Closes db connection, frees up resources, prevents memory leaks. */
//   afterAll(async () => {
//     await connection.close();
//     jest.clearAllMocks(); // Clear any mock behavior
//   });

//   afterEach(() => {
//     // Restore mocks
//     jest.clearAllMocks();
//     // Remove mock so other tests are not affected
//     jest.unmock("../database/connect");
//     jest.resetModules();
//   });

//   test("Should return 404 if record does not exist when updating item", async () => {
//     // Mock Express req and res objects
//     const req = {
//       params: {
//         // Mock valid ObjectId
//         id: "6759f2d2b7aaf3eb2152c14b", 
//       }, 
//       body: {
//         name: "test name", 
//         userId: null, 
//         categoryId: null, 
//         coverageId: null, 
//         purchaseDate: new Date(), 
//         purchasePrice: 0, 
//         description: "This is a jest unit test."
//       }, 
//     };
    
//     const res = {
//       status: jest.fn().mockReturnThis(),
//       json: jest.fn(),
//     };

//     const { updateItem } = require("../controllers/itemController");

//     // Call the function with the mocked req/res values
//     await updateItem(req, res);
  
//     // Verify that the invalid ID is handled correctly
//     expect(res.status).toHaveBeenCalledWith(404);
//     expect(res.json).toHaveBeenCalledWith({
//       error: "Item not found.",
//     });
//   });
// });

describe("Tests deleteItem controller for valid record not in database", () => {
  let connection;
  let db;

  beforeAll(async () => {
    connection = await MongoClient.connect(global.__MONGO_URI__);
    // Connect to team database explicitly
    db = await connection.db("team");

    jest.mock('../database/connect', () => ({
      getDb: jest.fn().mockReturnValue({
        collection: jest.fn().mockReturnValue({
          deleteOne: jest.fn().mockResolvedValue({ deletedCount: 0 })
        })
      })
    }));
  });

  /* Closes db connection, frees up resources, prevents memory leaks. */
  afterAll(async () => {
    await connection.close();
    jest.clearAllMocks(); // Clear any mock behavior
  });

  afterEach(() => {
    // Restore mocks
    jest.clearAllMocks();
    // Remove mock so other tests are not affected
    jest.unmock("../database/connect");
    jest.resetModules();
  });

  test("Should return 404 if record does not exist when deleting item", async () => {
    // Mock Express req and res objects
    const req = {
      params: {
        // Mock valid ObjectId
        id: "6759f2d2b7aaf3eb2152c14b", 
      },  
    };
    
    const res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };

    const { deleteItem } = require("../controllers/itemController");

    // Call the function with the mocked req/res values
    await deleteItem(req, res);
  
    // Verify that the invalid ID is handled correctly
    expect(res.status).toHaveBeenCalledWith(404);
    expect(res.json).toHaveBeenCalledWith({
      error: "No item found with that ID.",
    });
  });
});